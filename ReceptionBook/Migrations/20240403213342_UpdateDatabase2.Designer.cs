// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace ReceptionBook.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240403213342_UpdateDatabase2")]
    partial class UpdateDatabase2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("109ba8ea-dbf1-4221-99dd-00052b252de2"),
                            Email = "jana.mcleaf@gmail.com",
                            FirstName = "Jana",
                            LastName = "McLeaf",
                            PhoneNumber = "569-51-9770"
                        },
                        new
                        {
                            Id = new Guid("4b6693b4-f8bc-41b7-b7b8-4ef5b806335a"),
                            Email = "kane.miller@gmail.com",
                            FirstName = "Kane",
                            LastName = "Miller"
                        },
                        new
                        {
                            Id = new Guid("ff9b6370-e01d-4947-af32-f55c58905c95"),
                            Email = "jmatzl0@slashdot.org",
                            FirstName = "Jon",
                            LastName = "Matzl"
                        },
                        new
                        {
                            Id = new Guid("50aca617-2f75-4da7-a3af-074757f429fb"),
                            Email = "tthomtsonv@boston.com",
                            FirstName = "Tallia",
                            LastName = "Thomtson",
                            PhoneNumber = "726-61-4409"
                        },
                        new
                        {
                            Id = new Guid("eb36d4c7-3ed6-4a9b-8b61-dc42e1d40001"),
                            Email = "kmalia10@soundcloud.com",
                            FirstName = "Kirk",
                            LastName = "Malia",
                            PhoneNumber = "753-55-8744"
                        });
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ReservationId");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("856ebb5e-fa0e-48c7-8d4d-6605e304efaa"),
                            CustomerId = new Guid("4b6693b4-f8bc-41b7-b7b8-4ef5b806335a"),
                            EndDate = new DateOnly(2024, 4, 7),
                            RoomId = new Guid("a48e654e-7e13-4a3a-83c8-18f179dd9eea"),
                            StartDate = new DateOnly(2024, 4, 5),
                            TotalPrice = 200.00m
                        },
                        new
                        {
                            Id = new Guid("0857ed5f-98fa-4fdd-b78f-daf6955588a3"),
                            CustomerId = new Guid("109ba8ea-dbf1-4221-99dd-00052b252de2"),
                            EndDate = new DateOnly(2024, 4, 15),
                            RoomId = new Guid("56625ffa-ef46-461c-8867-2600d87a637a"),
                            StartDate = new DateOnly(2024, 4, 10),
                            TotalPrice = 1200.00m
                        },
                        new
                        {
                            Id = new Guid("e2afccbc-24df-4552-97dc-6af2b985d01a"),
                            CustomerId = new Guid("eb36d4c7-3ed6-4a9b-8b61-dc42e1d40001"),
                            EndDate = new DateOnly(2024, 4, 11),
                            RoomId = new Guid("282eee35-eea8-4ced-a43b-533b0ad7a946"),
                            StartDate = new DateOnly(2024, 4, 6),
                            TotalPrice = 1199.99m
                        });
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("RoomId");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ef4db57-145b-4b3d-903d-5486a621646e"),
                            Number = "A01",
                            Price = 100.00m,
                            Type = "Single"
                        },
                        new
                        {
                            Id = new Guid("9fbbb0c1-a6bb-433c-9520-5a45592f0084"),
                            Number = "A02",
                            Price = 150.00m,
                            Type = "Double"
                        },
                        new
                        {
                            Id = new Guid("a48e654e-7e13-4a3a-83c8-18f179dd9eea"),
                            Number = "A03",
                            Price = 100.00m,
                            Type = "Single"
                        },
                        new
                        {
                            Id = new Guid("56625ffa-ef46-461c-8867-2600d87a637a"),
                            Number = "B10",
                            Price = 300.00m,
                            Type = "Double"
                        },
                        new
                        {
                            Id = new Guid("7fac1f9c-b24b-4f3c-a4ea-4a0b3f5e2577"),
                            Number = "B11",
                            Price = 200.00m,
                            Type = "Single"
                        },
                        new
                        {
                            Id = new Guid("282eee35-eea8-4ced-a43b-533b0ad7a946"),
                            Number = "C01",
                            Price = 250.00m,
                            Type = "Single"
                        });
                });

            modelBuilder.Entity("Entities.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b778396b-8016-492a-8f38-4188eaca1e1e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "820e2100-4194-4c29-add7-1062282ea2d0",
                            Email = "emil.gruzalski@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Emil",
                            LastName = "Grużalski",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMIL.GRUZALSKI@GMAIL.COM",
                            NormalizedUserName = "EMIL.GRUZALSKI@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEEd0nIa6oNHC8HQEccb0wQk4VUoVikIc88+lhdaVWvrJ6f8uQyJKfpk8aUYE/ST8bQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c8d7d71e-5460-49e5-95b4-6efed1abc19c",
                            TwoFactorEnabled = false,
                            UserName = "emil.gruzalski@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "f4a6305f-859a-45da-9b5b-b0eafe40dce8",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "49daef7e-13cc-415b-84dc-1bd6535024b9",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "b778396b-8016-492a-8f38-4188eaca1e1e",
                            RoleId = "f4a6305f-859a-45da-9b5b-b0eafe40dce8"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.HasOne("Entities.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Entities.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
