// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Repository;

#nullable disable

namespace ReceptionBook.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    [Migration("20240330153958_InitialData")]
    partial class InitialData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("CustomerId");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("109ba8ea-dbf1-4221-99dd-00052b252de2"),
                            Email = "jana.mcleaf@gmail.com",
                            FirstName = "Jana",
                            LastName = "McLeaf"
                        },
                        new
                        {
                            Id = new Guid("4b6693b4-f8bc-41b7-b7b8-4ef5b806335a"),
                            Email = "kane.miller@gmail.com",
                            FirstName = "Kane",
                            LastName = "Miller"
                        });
                });

            modelBuilder.Entity("Entities.Models.Maintenance", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("MaintenanceId");

                    b.Property<decimal?>("Cost")
                        .IsRequired()
                        .HasColumnType("numeric");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.ToTable("Maintenance");

                    b.HasData(
                        new
                        {
                            Id = new Guid("bc1db9a1-8d53-46ab-93f4-e5a9b81e5119"),
                            Cost = 100.50m,
                            Description = "Broken sink",
                            EndDate = new DateOnly(2024, 4, 8),
                            RoomId = new Guid("1ef4db57-145b-4b3d-903d-5486a621646e"),
                            StartDate = new DateOnly(2024, 4, 1)
                        },
                        new
                        {
                            Id = new Guid("b1bb6af1-f424-411f-9a30-34532015f75d"),
                            Cost = 249.99m,
                            Description = "Broken window",
                            RoomId = new Guid("9fbbb0c1-a6bb-433c-9520-5a45592f0084"),
                            StartDate = new DateOnly(2024, 4, 1)
                        });
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("ReservationId");

                    b.Property<Guid?>("CustomerId")
                        .IsRequired()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date");

                    b.Property<Guid>("RoomId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RoomId");

                    b.ToTable("Reservations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("856ebb5e-fa0e-48c7-8d4d-6605e304efaa"),
                            CustomerId = new Guid("4b6693b4-f8bc-41b7-b7b8-4ef5b806335a"),
                            EndDate = new DateOnly(2024, 4, 7),
                            RoomId = new Guid("a48e654e-7e13-4a3a-83c8-18f179dd9eea"),
                            StartDate = new DateOnly(2024, 4, 5),
                            Status = "Pending",
                            TotalPrice = 200m
                        },
                        new
                        {
                            Id = new Guid("0857ed5f-98fa-4fdd-b78f-daf6955588a3"),
                            CustomerId = new Guid("109ba8ea-dbf1-4221-99dd-00052b252de2"),
                            EndDate = new DateOnly(2024, 4, 20),
                            RoomId = new Guid("56625ffa-ef46-461c-8867-2600d87a637a"),
                            StartDate = new DateOnly(2024, 4, 10),
                            Status = "Confirmed",
                            TotalPrice = 2100m
                        });
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("RoomId");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("character varying(5)");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.ToTable("Rooms");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1ef4db57-145b-4b3d-903d-5486a621646e"),
                            Number = "101",
                            Price = 100m,
                            Type = "Single"
                        },
                        new
                        {
                            Id = new Guid("9fbbb0c1-a6bb-433c-9520-5a45592f0084"),
                            Number = "102",
                            Price = 150m,
                            Type = "Double"
                        },
                        new
                        {
                            Id = new Guid("a48e654e-7e13-4a3a-83c8-18f179dd9eea"),
                            Number = "103",
                            Price = 100m,
                            Type = "Single"
                        },
                        new
                        {
                            Id = new Guid("56625ffa-ef46-461c-8867-2600d87a637a"),
                            Number = "104",
                            Price = 150m,
                            Type = "Double"
                        },
                        new
                        {
                            Id = new Guid("7fac1f9c-b24b-4f3c-a4ea-4a0b3f5e2577"),
                            Number = "105",
                            Price = 100m,
                            Type = "Single"
                        });
                });

            modelBuilder.Entity("Entities.Models.Maintenance", b =>
                {
                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Maintenances")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.Reservation", b =>
                {
                    b.HasOne("Entities.Models.Customer", "Customer")
                        .WithMany("Reservations")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Models.Room", "Room")
                        .WithMany("Reservations")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("Entities.Models.Customer", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Entities.Models.Room", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("Reservations");
                });
#pragma warning restore 612, 618
        }
    }
}
